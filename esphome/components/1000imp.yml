 
#  # ⬇ Enable Home Assistant API ⬇ # 
api:
  services:
    - service: meterstand_kwh
      variables:
        meter_value: float 
      then:
        - globals.set:
            id: totalkwhUsage
            value: !lambda "return ( meter_value ) ;"

globals:
  - id: totalkwhUsage
    type: float #int
# ⬇ Bij het updaten onder de waarde, verander dit in nee voor 1 run  ⬇ # 
    restore_value: true      # aanpassen naar no indien de nieuwe waarde onder de oude ligt
# ⬇ Bij het flashen,pas dit aan! ⬇ #        
    initial_value: '00010' 



select:
  # ⬇ imp/kWh rate ⬇ #
  - platform: template
    name: "Pulse_rate kWh meter"
    id: Select_pulse_rate
    optimistic: true
    options:
      - "2000"
      - "1500" 
      - "1000"
      - "500" 
      - "100"
    initial_option: "1000"
    on_value:
      then:
        - logger.log:
            format: "Chosen option: %s "
            args: ["x.c_str()"]

#------------------------# Kwh meter S0 poort 1 #------------------------#
sensor:
# ⬇ kwh meter s0 ⬇ #
  - platform: pulse_meter
    pin: D5 
    name:  "Actuele energie"
    id: W_opbrengst
    icon: "mdi:flash"
#    internal_filter: ${impulslengte} 
    accuracy_decimals: 3
    unit_of_measurement: 'kW'
    state_class: measurement
    device_class: power
    filters:
      - lambda: return x * ((60.0 / atoi(id(Select_pulse_rate).state.c_str()))); 

# ⬇ Totaal opgebracht ⬇ #    
    total:
      unit_of_measurement: 'kWh'
      name: "Totaal opgebracht"
      id: W_opbrengst_totaal
      state_class: total_increasing
      device_class: energy
      icon: "mdi:flash"
      accuracy_decimals: 2
      filters:
        - multiply: 0.001
#        - lambda: return x * ((1.0 / atoi(id(Select_pulse_rate).state.c_str()))); 

# ⬇ Kwh meterstand ⬇ stand bij benadering #        
  - platform: template
    id: kwh_total
    name: "Actuele meterstand"
    state_class: "total_increasing"
    icon: "mdi:flash"
    update_interval: 1s
    unit_of_measurement: 'kWh'
    accuracy_decimals: 2
    lambda: 
      return id(W_opbrengst_totaal).state + id(totalkwhUsage);
